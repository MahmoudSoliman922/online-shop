{"ast":null,"code":"import _objectSpread from \"/usr/src/frontend-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/usr/src/frontend-app/src/components/shared/Table.js\";\nimport React from 'react';\nimport MUIDataTable from 'mui-datatables';\nexport default class Table extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      page: 0,\n      count: 0,\n      data: [],\n      isLoading: false,\n      columns: [],\n      filter: false,\n      serverSideFilterList: [],\n      filters: [[], [], [], [], []],\n      serverSide: false,\n      options: {}\n    };\n\n    this.handleFilterSubmit = filterList => () => {\n      let filters = {\n        departement: filterList[0][0],\n        promotion_active: filterList[4][0]\n      };\n      this.setState({\n        isLoading: true,\n        filters: filterList\n      });\n      this.props.getFiltered(filters).then(res => {\n        this.setState({\n          isLoading: false,\n          data: res.data.response.offers,\n          serverSideFilterList: filterList,\n          columns: this.props.columns,\n          count: res.data.response.total\n        });\n      });\n    };\n\n    this.changePage = page => {\n      this.setState({\n        isLoading: true\n      });\n      this.props.getPaginated(page + 1).then(res => {\n        this.setState({\n          isLoading: false,\n          page: page,\n          data: res.data.response.offers,\n          count: res.data.response.total,\n          columns: this.props.columns\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.getAll().then(offers => {\n      this.setState(_objectSpread({}, this.state, {\n        columns: this.props.columns,\n        data: offers.data.response.offers,\n        serverSide: this.props.serverSide,\n        options: {\n          filterType: 'dropdown',\n          rowsPerPage: 15,\n          responsive: 'stacked',\n          count: offers.data.response.total,\n          search: true,\n          filter: true,\n          serverSide: false,\n          viewColumns: false,\n          print: false,\n          download: false,\n          selectableRows: \"none\"\n        }\n      }));\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.props.serverSide !== this.state.serverSide) {\n      if (this.props.serverSide === true) {\n        this.setState({\n          isLoading: true,\n          serverSide: this.props.serverSide\n        });\n        this.props.getPaginated(1).then(res => {\n          this.setState({\n            isLoading: false,\n            page: res.data.response.page,\n            data: res.data.response.offers,\n            serverSide: this.props.serverSide,\n            columns: this.props.columns,\n            count: res.data.response.total,\n            options: {\n              filterType: 'dropdown',\n              responsive: 'stacked',\n              count: res.data.response.total,\n              search: false,\n              viewColumns: false,\n              filter: true,\n              serverSide: true,\n              print: false,\n              download: false,\n              onFilterChange: (column, filterList, type) => {\n                if (type === 'reset') {\n                  this.props.getPaginated(1).then(res => {\n                    this.setState(_objectSpread({}, this.state, {\n                      isLoading: false,\n                      page: res.data.response.page,\n                      data: res.data.response.offers,\n                      serverSide: this.props.serverSide,\n                      columns: this.props.columns,\n                      count: res.data.response.total\n                    }));\n                  });\n                }\n              },\n              customFilterDialogFooter: filterList => {\n                return React.createElement(\"div\", {\n                  style: {\n                    marginTop: '40px'\n                  },\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 84\n                  },\n                  __self: this\n                }, React.createElement(\"button\", {\n                  variant: \"contained\",\n                  onClick: this.handleFilterSubmit(filterList),\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 85\n                  },\n                  __self: this\n                }, \"Apply Filters*\"));\n              },\n              onTableChange: (action, tableState) => {\n                switch (action) {\n                  case 'changePage':\n                    this.changePage(tableState.page);\n                    break;\n                }\n              }\n            }\n          });\n        });\n      } else {\n        this.props.getAll().then(offers => {\n          this.setState(_objectSpread({}, this.state, {\n            columns: this.props.columns,\n            data: offers.data.response.offers,\n            serverSide: this.props.serverSide,\n            options: {\n              filterType: 'dropdown',\n              rowsPerPage: 15,\n              responsive: 'stacked',\n              count: offers.data.response.total,\n              search: true,\n              filter: true,\n              serverSide: false,\n              download: false,\n              onFilterChange: (column, filterList, type) => {},\n              customFilterDialogFooter: filterList => {},\n              onTableChange: (action, tableState) => {}\n            }\n          }));\n        });\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(MUIDataTable, {\n      data: this.state.data,\n      columns: this.state.columns,\n      options: this.state.options,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/usr/src/frontend-app/src/components/shared/Table.js"],"names":["React","MUIDataTable","Table","Component","state","page","count","data","isLoading","columns","filter","serverSideFilterList","filters","serverSide","options","handleFilterSubmit","filterList","departement","promotion_active","setState","props","getFiltered","then","res","response","offers","total","changePage","getPaginated","componentDidMount","getAll","filterType","rowsPerPage","responsive","search","viewColumns","print","download","selectableRows","componentDidUpdate","onFilterChange","column","type","customFilterDialogFooter","marginTop","onTableChange","action","tableState","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport MUIDataTable from 'mui-datatables';\n\nexport default class Table extends React.Component {\n  state = {\n    page: 0,\n    count: 0,\n    data: [],\n    isLoading: false,\n    columns: [],\n    filter: false,\n    serverSideFilterList: [],\n    filters: [[], [], [], [], []],\n    serverSide: false,\n    options: {}\n  };\n\n  componentDidMount() {\n    this.props.getAll().then(offers => {\n      this.setState({\n        ...this.state,\n        columns: this.props.columns,\n        data: offers.data.response.offers,\n        serverSide: this.props.serverSide,\n        options: {\n          filterType: 'dropdown',\n          rowsPerPage: 15,\n          responsive: 'stacked',\n          count: offers.data.response.total,\n          search: true,\n          filter: true,\n          serverSide: false,\n          viewColumns: false,\n          print: false,\n          download: false,\n          selectableRows: \"none\"\n        }\n      });\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.props.serverSide !== this.state.serverSide) {\n      if (this.props.serverSide === true) {\n        this.setState({\n          isLoading: true,\n          serverSide: this.props.serverSide\n        });\n        this.props.getPaginated(1).then(res => {\n          this.setState({\n            isLoading: false,\n            page: res.data.response.page,\n            data: res.data.response.offers,\n            serverSide: this.props.serverSide,\n            columns: this.props.columns,\n            count: res.data.response.total,\n            options: {\n              filterType: 'dropdown',\n              responsive: 'stacked',\n              count: res.data.response.total,\n              search: false,\n              viewColumns: false,\n              filter: true,\n              serverSide: true,\n              print: false,\n              download: false,\n              onFilterChange: (column, filterList, type) => {\n                if (type === 'reset') {\n                  this.props.getPaginated(1).then(res => {\n                    this.setState({\n                      ...this.state,\n                      isLoading: false,\n                      page: res.data.response.page,\n                      data: res.data.response.offers,\n                      serverSide: this.props.serverSide,\n                      columns: this.props.columns,\n                      count: res.data.response.total\n                    });\n                  });\n                }\n              },\n              customFilterDialogFooter: filterList => {\n                return (\n                  <div style={{ marginTop: '40px' }}>\n                    <button variant='contained' onClick={this.handleFilterSubmit(filterList)}>\n                      Apply Filters*\n                    </button>\n                  </div>\n                );\n              },\n              onTableChange: (action, tableState) => {\n                switch (action) {\n                  case 'changePage':\n                    this.changePage(tableState.page);\n                    break;\n                }\n              }\n            }\n          });\n        });\n      } else {\n        this.props.getAll().then(offers => {\n          this.setState({\n            ...this.state,\n            columns: this.props.columns,\n            data: offers.data.response.offers,\n            serverSide: this.props.serverSide,\n            options: {\n              filterType: 'dropdown',\n              rowsPerPage: 15,\n              responsive: 'stacked',\n              count: offers.data.response.total,\n              search: true,\n              filter: true,\n              serverSide: false,\n              download: false,\n              onFilterChange: (column, filterList, type) => {},\n              customFilterDialogFooter: filterList => {},\n              onTableChange: (action, tableState) => {}\n            }\n          });\n        });\n      }\n    }\n  }\n\n  handleFilterSubmit = filterList => () => {\n    let filters = {\n      departement: filterList[0][0],\n      promotion_active: filterList[4][0]\n    };\n    this.setState({ isLoading: true, filters: filterList });\n\n    this.props.getFiltered(filters).then(res => {\n      this.setState({\n        isLoading: false,\n        data: res.data.response.offers,\n        serverSideFilterList: filterList,\n        columns: this.props.columns,\n        count: res.data.response.total\n      });\n    });\n  };\n\n  changePage = page => {\n    this.setState({\n      isLoading: true\n    });\n    this.props.getPaginated(page + 1).then(res => {\n      this.setState({\n        isLoading: false,\n        page: page,\n        data: res.data.response.offers,\n        count: res.data.response.total,\n        columns: this.props.columns\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <MUIDataTable\n          data={this.state.data}\n          columns={this.state.columns}\n          options={this.state.options}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}